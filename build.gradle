apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

buildscript {
	repositories {
		mavenLocal()
		jcenter()
	}
	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
	}
}

group = 'etri'
version = '20.05.15'

sourceCompatibility = JavaVersion.VERSION_1_8
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenLocal()
	maven { url "http://repo.osgeo.org/repository/release/" }
    mavenCentral()
}

ext {
//	hadoop_version = '2.7.3'
	hadoop_version = '3.1.1'
	avro_version = '1.9.2'
}

dependencies {
	compile project(':marmot.data')
	
	compile ("org.apache.hadoop:hadoop-common:${hadoop_version}")
	compile ("org.apache.hadoop:hadoop-hdfs-client:${hadoop_version}")
	
	// Avro (Avro 파일을 HDFS에 저장하기 위해 사용: FsInput)
	compile ("org.apache.avro:avro-mapred:${avro_version}") {
		exclude group: 'org.apache.avro', module: 'avro-ipc'
		exclude group: 'org.apache.avro', module: 'avro-ipc-jetty'
	}
}

shadowJar {
	classifier 'all'
	
//	zip64 true
	mergeServiceFiles()
	
	exclude 'META-INF/*.SF'
	exclude 'META-INF/*.DSA'
	exclude 'META-INF/*.RSA'
}

task sourceJar(type: Jar) {
	classifier 'sources'
	from sourceSets.main.allSource
}
task javadocJar(type: Jar) {
	classifier 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourceJar
	archives javadocJar
	archives shadowJar
}

publishing {
	publications {
		marmotHadoop(MavenPublication) {
			from components.java
			
			artifact sourceJar
			artifact javadocJar
			artifact shadowJar
		}
	}
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
            			def entry = values.first()
            			if ( entry.kind == 'src' ) {
            				entry.includes = []
            				entry.excludes = []
            			}
            			int index = cp.entries.indexOf entry
            			cp.entries.removeAll values
            			cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						entry.output = 'classes'
					}
				}
			}
		}
	}
}
